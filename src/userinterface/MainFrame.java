/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface;

import java.text.SimpleDateFormat;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.concurrent.CopyOnWriteArrayList;
import javax.swing.JLabel;
import javax.swing.JTabbedPane;
import javax.swing.table.DefaultTableModel;
import request.Request;
import request.RequestQueue;
import server.ProcessServer;
import server.ServerPool;
import threads.DispatcherThread;
import threads.RequestQueueThread;

public class MainFrame extends javax.swing.JFrame {
    
    public int requestRate;
    public int processingTime;
    public int poolSize;
    public int queueSize;
    
    RequestQueue requestQueue;
    
    ServerPool serverPool;
    
    ProcessServer processServer;
    
    CopyOnWriteArrayList<ProcessServer> availableServers;
    
    RequestQueueThread requestQueueThread;
    
    DispatcherThread dispatcherRunnable;
    
    Thread dispatcher;
    Thread request;
    
    public MainFrame() {
        
        initComponents();
        
        requestQueue = new RequestQueue();
        stopBtn.setEnabled(false);
        
    }

    public JLabel getjLabel2() {
        return jLabel2;
    }

    public void setjLabel2(JLabel jLabel2) {
        this.jLabel2 = jLabel2;
    }

    public JTabbedPane getMonitoringTabs() {
        return monitoringTabs;
    }

    
    
    public void populateRequestTable(RequestQueue requestQueue) {
        try {
            
            DefaultTableModel defaultTableModel = (DefaultTableModel) ServerQueueTbl.getModel();
            defaultTableModel.setRowCount(0);
            LinkedList<Request> requestList = (LinkedList) requestQueue.getRequestQueue();
            Object rows[];
            ListIterator<Request> requestIterator = requestList.listIterator();
            while (requestIterator.hasNext()) {
                Request request = (Request) requestIterator.next();
                if (request.getStatus().equals("INCOMING")) {
                    rows = new Object[2];
                    rows[0] = request.getRequestName();
                    rows[1] = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS").format(request.getStartTime());
                    defaultTableModel.addRow(rows);
                }
                
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    public void populateProcessedRequestTable(ProcessServer server, Request request) {
        
        try {
            DefaultTableModel defaultTableModel = (DefaultTableModel) processedRequestTbl.getModel();
            Object rows[];
            rows = new Object[3];
            rows[0] = request.getRequestName();
            rows[1] = server.getName();
            rows[2] = request.getResponseTime() / 1000;
            defaultTableModel.addRow(rows);
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    public void populateServerPoolTable() {
        try {
            
            DefaultTableModel defaultTableModel = (DefaultTableModel) serverPoolTbl.getModel();
            defaultTableModel.setRowCount(0);
            Object rows[];
            
            if (serverPool != null) {
                for (ProcessServer server : serverPool.getServers()) {
                    
                    rows = new Object[1];
                    rows[0] = server.getName();
                    defaultTableModel.addRow(rows);
                }
            }
            
        } catch (Exception e) {
            e.printStackTrace();
        }
        
    }
    
    public JLabel getStatusLbl() {
        return statusLbl;
    }
    
    public void setStatusLbl(JLabel statusLbl) {
        this.statusLbl = statusLbl;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        container = new javax.swing.JPanel();
        startBtn = new javax.swing.JButton();
        stopBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ServerQueueTbl = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        statusLbl = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        requestRateSpinner = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        processTimeSpinner = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        poolSizeSpinner = new javax.swing.JSpinner();
        jScrollPane5 = new javax.swing.JScrollPane();
        serverPoolTbl = new javax.swing.JTable();
        monitoringTabs = new javax.swing.JTabbedPane();
        jScrollPane6 = new javax.swing.JScrollPane();
        processedRequestTbl = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        QueueSizeSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startBtn.setText("Start");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        stopBtn.setText("Stop");
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });

        ServerQueueTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Name", "Creation Time"
            }
        ));
        jScrollPane1.setViewportView(ServerQueueTbl);
        if (ServerQueueTbl.getColumnModel().getColumnCount() > 0) {
            ServerQueueTbl.getColumnModel().getColumn(0).setResizable(false);
            ServerQueueTbl.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel1.setText("INCOMING QUEUE:");

        jLabel2.setText("SERVER WAITING QUEUE:");

        statusLbl.setText("          ");

        jLabel3.setText("Server Pool");

        jLabel6.setText("Request Rate (in sec):");

        requestRateSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel7.setText("Processing Time (in sec):");

        processTimeSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));

        jLabel8.setText("Pool Size:");

        poolSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 3, null, 1));

        serverPoolTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Server"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(serverPoolTbl);
        if (serverPoolTbl.getColumnModel().getColumnCount() > 0) {
            serverPoolTbl.getColumnModel().getColumn(0).setResizable(false);
        }

        processedRequestTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Request Name", "Server", "Response Time (sec)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(processedRequestTbl);

        jLabel4.setText("Processed Requests:");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel10.setText("ELASTIC COMPUTING: SIMULATION OF USER REQUESTS TO WEBSITE");
        jLabel10.setPreferredSize(new java.awt.Dimension(360, 14));

        jLabel9.setText("Queue Size:");

        QueueSizeSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 5, null, 1));

        javax.swing.GroupLayout containerLayout = new javax.swing.GroupLayout(container);
        container.setLayout(containerLayout);
        containerLayout.setHorizontalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(containerLayout.createSequentialGroup()
                                .addGap(575, 575, 575)
                                .addComponent(jLabel4))
                            .addGroup(containerLayout.createSequentialGroup()
                                .addComponent(monitoringTabs, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(jScrollPane6)
                                .addGap(33, 33, 33))
                            .addGroup(containerLayout.createSequentialGroup()
                                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(containerLayout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(requestRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(processTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(poolSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(26, 26, 26)
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(QueueSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(containerLayout.createSequentialGroup()
                                        .addGap(301, 301, 301)
                                        .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(containerLayout.createSequentialGroup()
                                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 636, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10))
                                            .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2))
                        .addContainerGap(71, Short.MAX_VALUE))
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(statusLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 745, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(113, 113, 113))
                    .addGroup(containerLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(164, 164, 164))))
        );
        containerLayout.setVerticalGroup(
            containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerLayout.createSequentialGroup()
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(stopBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(requestRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(processTimeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(poolSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(QueueSizeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1))
                    .addGroup(containerLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(statusLbl))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(containerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(monitoringTabs, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(container, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        statusLbl.setText("Processing Stopped");
        requestQueueThread.setFlag(false);
        startBtn.setEnabled(false);
    }//GEN-LAST:event_stopBtnActionPerformed

    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed

        try {
            requestRate = Integer.parseInt(requestRateSpinner.getValue().toString());
            poolSize = Integer.parseInt(poolSizeSpinner.getValue().toString());
            processingTime = Integer.parseInt(processTimeSpinner.getValue().toString());
            queueSize = Integer.parseInt(QueueSizeSpinner.getValue().toString());
            serverPool = new ServerPool(poolSize, queueSize);

            populateServerPoolTable();
            availableServers = new CopyOnWriteArrayList<>();

            requestQueueThread = new RequestQueueThread(this, requestQueue, requestRate, processingTime);
            requestQueueThread.setFlag(true);
            dispatcherRunnable = new DispatcherThread(this, requestQueue, serverPool, availableServers);
            dispatcher = new Thread(dispatcherRunnable);
            request = new Thread(requestQueueThread);

            statusLbl.setText("Processing Requests");
            request.start();

            dispatcher.start();

            try {
                dispatcherRunnable.startProcessing();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        startBtn.setEnabled(false);
        stopBtn.setEnabled(true);
    }//GEN-LAST:event_startBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSpinner QueueSizeSpinner;
    private javax.swing.JTable ServerQueueTbl;
    private javax.swing.JPanel container;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane monitoringTabs;
    private javax.swing.JSpinner poolSizeSpinner;
    private javax.swing.JSpinner processTimeSpinner;
    private javax.swing.JTable processedRequestTbl;
    private javax.swing.JSpinner requestRateSpinner;
    private javax.swing.JTable serverPoolTbl;
    private javax.swing.JButton startBtn;
    private javax.swing.JLabel statusLbl;
    private javax.swing.JButton stopBtn;
    // End of variables declaration//GEN-END:variables
}
